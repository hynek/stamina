[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme>=22.8.0"]
build-backend = "hatchling.build"


[project]
dynamic = ["version", "readme"]
name = "stamina"
description = "Production-grade retries made easy."
requires-python = ">=3.8"
license = "MIT"
keywords = ["retry", "retries", "reliability", "tenacity"]
authors = [{ name = "Hynek Schlawack", email = "hs@ox.cx" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]
dependencies = ["tenacity", "typing-extensions; python_version<'3.10'"]

[project.optional-dependencies]
tests = ["pytest", "pytest-asyncio"]
typing = ["mypy"]
docs = [
  "sphinx",
  "furo",
  "myst-parser",
  "sphinx-notfound-page",
  "structlog",
  "prometheus-client",
]
dev = [
  "stamina[tests,typing]",
  "nox",
  "tomli; python_version<'3.11'",
  "structlog",
  "prometheus-client",
]

[project.urls]
Documentation = "https://py-stamina.readthedocs.io/"
Source = "https://github.com/hynek/stamina"
Changelog = "https://github.com/hynek/stamina/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/hynek"


[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }


[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = "# *stamina*: Production-grade Retries Made Easy"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "## Production-grade Retries Made Easy"


[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """

## Release Information

"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"
start-after = "<!-- changelog follows -->"
pattern = "\n(###.+?\n)## "

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-at = "## License"


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
testpaths = "tests"
xfail_strict = true
filterwarnings = ["once::Warning"]
asyncio_mode = "auto"


[tool.coverage.run]
branch = true
parallel = true
source = ["stamina"]

[tool.coverage.paths]
source = ["src", ".nox/tests*/**/site-packages"]

[tool.coverage.report]
how_missing = true
skip_covered = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  # Typing-related
  "if TYPE_CHECKING:",
  "^ +\\.\\.\\.$",
]


[tool.mypy]
strict = true

show_error_codes = true
enable_error_code = ["ignore-without-code"]

ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.typing.*"
ignore_errors = false

[[tool.mypy.overrides]]
module = "tenacity.*"
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "nox.*"
follow_imports = "skip"


[tool.black]
line-length = 79


[tool.ruff]
src = ["src", "tests", "noxfile.py"]
select = [
  "E",   # pycodestyle
  "W",   # pycodestyle
  "F",   # Pyflakes
  "UP",  # pyupgrade
  "N",   # pep8-naming
  "YTT", # flake8-2020
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "T10", # flake8-debugger
  "ISC", # flake8-implicit-str-concat
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "DTZ", # flake8-datetimez
  "I",   # isort
  "PGH", # pygrep-hooks
  "PLC", # Pylint
  "PIE", # flake8-pie
  "RUF", # ruff
]
ignore = [
  "RUF001", # leave my smart characters alone
  "E501",   # enforce line lengths using Black
]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "S101",    # assert
  "SIM300",  # Yoda rocks in tests
  "PLC1901", # empty strings are falsey, but are less specific in tests
]

[tool.ruff.isort]
lines-between-types = 1
lines-after-imports = 2
