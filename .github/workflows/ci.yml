---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

permissions: {}

jobs:
  build-package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: hynek/build-and-inspect-python-package@v1

  tests:
    name: Tests on ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: build-package
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - name: Get tests & config from sdist
        run: |
          tar xf dist/*.tar.gz --strip-components=1
          rm -rf src
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: pip

      - name: Prepare & run Nox
        run: |
          python -Im pip install nox "tomli; python_version<'3.11'"
          python -Im nox \
            --python ${{ matrix.python-version }} \
            --sessions tests \
            -- --installpkg dist/*.whl

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: Combine & check coverage.
    runs-on: ubuntu-latest
    needs: tests
    if: always()

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          cache: pip
          python-version-file: .python-version-default

      - uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -Im pip install --upgrade coverage[toml]

          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -Im coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  mypy-api:
    name: Type-check API on ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: build-package
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1  # needed for config files
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: pip

      - name: Prepare & run Nox
        run: |
          python -Im pip install nox "tomli; python_version<'3.11'"
          python -Im nox \
            --python ${{ matrix.python-version }} \
            --sessions mypy_api

  mypy-pkg:
    name: Type-check package
    runs-on: ubuntu-latest
    needs: build-package

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1  # needed for config files
      - uses: actions/setup-python@v4
        with:
          cache: pip
          python-version-file: .python-version-default

      - name: Prepare & run Nox
        run: |
          python -Im pip install nox "tomli; python_version<'3.11'"
          python -Im nox \
            --sessions mypy_pkg

  docs:
    name: Build docs & run doctests
    runs-on: ubuntu-latest
    needs: build-package
    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v3
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1
      - uses: actions/setup-python@v4
        with:
          # Keep in sync with .readthedocs.yaml
          python-version: "3.11"
          cache: pip

      - name: Prepare & run Nox
        run: |
          python -Im pip install nox
          python -Im nox \
            --session docs

  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          cache: pip
          python-version-file: .python-version-default

      - name: Install in dev mode & import
        run: |
          python -Im pip install -e .[dev]
          python -Ic 'import stamina; print(stamina.__version__)'

  required-checks-pass:
    name: Ensure everything required is passing for branch protection.
    if: always()

    needs:
      - coverage
      - install-dev
      - docs
      - mypy-api
      - mypy-pkg

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
